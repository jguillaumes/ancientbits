ca65 V2.16 - Git N/A
Main file   : revers.s
Current file: revers.s

000000r 1               
000000r 1               	.list off
000000r 1               	.list on
000000r 1               
000000r 1               	.code
000000r 1               
000000r 1               	;; Constants
000000r 1               	CR     	= $0D		; Carriage return literal
000000r 1               	CHRIN  	= $FFCF		; KERNAL Read character from input
000000r 1               	CHROUT 	= $FFD2		; KERNAL Write character to output
000000r 1               	CHPTRO 	= FREKZP	; Page-zero word for input buffer
000000r 1               	STKBSE 	= $0100		; Base of 6502 stack
000000r 1               
000000r 1               	.proc	_main
000000r 1               
000000r 1               	;; -------------------------------------------------------------
000000r 1               	;; Main procedure
000000r 1               	;;
000000r 1  A9 rr        start:	lda	#<hello		; Load welcome message address
000002r 1  48           	pha
000003r 1  A9 rr        	lda	#>hello
000005r 1  48           	pha
000006r 1  20 rr rr     	jsr	putstr		; ... and show it
000009r 1  68           	pla			; Remove address from stack
00000Ar 1  68           	pla			;
00000Br 1               	;;
00000Br 1  20 rr rr     getlin:	jsr	newline		; New line before prompt
00000Er 1  A9 rr        	lda	#<prompt	; Show prompt
000010r 1  48           	pha
000011r 1  A9 rr        	lda	#>prompt
000013r 1  48           	pha
000014r 1  20 rr rr     	jsr	putstr
000017r 1  68           	pla
000018r 1  68           	pla
000019r 1               	;;	Get a line from the user
000019r 1  A0 00        	ldy	#$0		; Ponter-index: zero
00001Br 1  20 CF FF     loop:	jsr	CHRIN		; Read character using KERNAL
00001Er 1  C9 0D        	cmp	#CR		; Is it carriage return?
000020r 1  F0 07        	beq	filoop		; Yes, we've got a line
000022r 1  99 rr rr     	sta	buffin,Y	; No: store the character in buffer...
000025r 1  C8           	iny			; ... and increment the pointer-index
000026r 1  4C rr rr     	jmp	loop		; Get next character
000029r 1               	;;
000029r 1  C0 00        filoop:	cpy	#0		; Have we got any character?
00002Br 1  F0 3B        	beq	final		; No, finish the process
00002Dr 1  8C rr rr     	sty	numch		; Yes, store the number of characters
000030r 1  A9 00        	lda	#0		; Append a null marker
000032r 1  99 rr rr     	sta	buffin,Y
000035r 1               	;;
000035r 1  20 rr rr     	jsr	newline		; New line on screen
000038r 1  A9 rr        	lda	#<invert	; Show "inverted" message
00003Ar 1  48           	pha
00003Br 1  A9 rr        	lda	#>invert
00003Dr 1  48           	pha
00003Er 1  20 rr rr     	jsr	putstr
000041r 1  68           	pla
000042r 1  68           	pla
000043r 1               	;; Let's reverse the buffer
000043r 1  A2 00        	ldx	#0		; X-> Index for output buffer
000045r 1  AC rr rr     	ldy	numch
000048r 1  88           iloop:	dey			; Do not move final null
000049r 1  B9 rr rr     	lda	buffin,y	; We get characters from the end...
00004Cr 1  9D rr rr     	sta	bufout,x	; ... and store from the beginning
00004Fr 1  E8           	inx
000050r 1  EC rr rr     	cpx	numch		; How many chars have we done?
000053r 1  D0 F3        	bne	iloop		; Loop until don
000055r 1  A9 00        	lda	#0
000057r 1  9D rr rr     	sta	bufout,x	; Add final null
00005Ar 1               	;;
00005Ar 1  A9 rr        	lda	#<bufout	; Display inverted string
00005Cr 1  48           	pha
00005Dr 1  A9 rr        	lda	#>bufout
00005Fr 1  48           	pha
000060r 1  20 rr rr     	jsr	putstr
000063r 1  68           	pla
000064r 1  68           	pla
000065r 1               	;;
000065r 1  4C rr rr     	jmp	getlin		; Get one more line
000068r 1               	;;
000068r 1  20 rr rr     final:	jsr	newline
00006Br 1  A9 rr        	lda	#<adeu		; Show the goodbye message
00006Dr 1  48           	pha
00006Er 1  A9 rr        	lda	#>adeu
000070r 1  48           	pha
000071r 1  20 rr rr     	jsr	putstr
000074r 1  68           	pla
000075r 1  68           	pla
000076r 1               	;;
000076r 1  60           	rts
000077r 1               
000077r 1               	.endproc
000077r 1               
000077r 1               	;; -------------------------------------------------------------
000077r 1               	;; putstr procedure: put out a zero-terminated string
000077r 1               	;; -------------------------------------------------------------
000077r 1               	;; The address is in the stack. The low byte has to be
000077r 1               	;; pushed before the hight byte.
000077r 1               	;; At entry, the parameters are at SP+3
000077r 1               	;; Since we use the stack to preserve X and Y, we must
000077r 1               	;; get them at SP+5. To make it easier to understand, we will
000077r 1               	;; index using X+4. We use 4 INX instead of moving to ACC, adding
000077r 1               	;; and moving back to X to save cycles (hehehe).
000077r 1               	;; Uses the CHPTRO/CHRTRO+1 zero page addresses
000077r 1               	;; Clobbers the Accumulator
000077r 1               	.proc	putstr
000077r 1  98           	tya			; Preserve Y
000078r 1  48           	pha
000079r 1  8A           	txa			; Preserve X
00007Ar 1  48           	pha
00007Br 1  BA           	tsx			; X = Stack pointer
00007Cr 1  E8           	inx			; Adjust X for parameters in stack
00007Dr 1  E8           	inx			;
00007Er 1  E8           	inx			;
00007Fr 1  E8           	inx			; X = end of parameters in stack
000080r 1  BD 01 01     	lda	STKBSE+1,X	; Get high byte of string address
000083r 1  85 FC        	sta	CHPTRO+1	; ... store it in zero page pointer
000085r 1  E8           	inx
000086r 1  BD 01 01     	lda	STKBSE+1,X	; Get low byte of string address
000089r 1  85 FB        	sta	CHPTRO		; ... store it in zero page pointer
00008Br 1  A0 00        	ldy	#$0		; Y: zero
00008Dr 1  B1 FB        @loop:	lda	(CHPTRO),y	; Load byte at CHPTRO + y
00008Fr 1  C9 00        	cmp	#$0		; Null byte?
000091r 1  F0 07        	beq	@xloop		; Yes, end of string
000093r 1  20 D2 FF     	jsr	CHROUT		; No: put character using KERNAL
000096r 1  C8           	iny			; Increment Y for next byte
000097r 1  4C rr rr     	jmp	@loop		; And repeat
00009Ar 1  68           @xloop: pla			; Restore the X register
00009Br 1  AA           	tax			; ... using the accumulator
00009Cr 1  68           	pla			; Restore Y register
00009Dr 1  A8           	tay			; ... using the accumulator
00009Er 1  60           	rts
00009Fr 1               	.endproc
00009Fr 1               
00009Fr 1               	;; -------------------------------------------------------------
00009Fr 1               	;; Output a newline (CR) using KERNAL
00009Fr 1               	;; -------------------------------------------------------------
00009Fr 1               	.proc newline
00009Fr 1  A9 0D        	lda	#CR
0000A1r 1  20 D2 FF     	jsr	CHROUT
0000A4r 1  60           	rts
0000A5r 1               	.endproc
0000A5r 1               
0000A5r 1               	;; Constant data (literals)
0000A5r 1               	.rodata
000000r 1  52 45 56 45  hello:	.asciiz	"reverse per c64"
000004r 1  52 53 45 20  
000008r 1  50 45 52 20  
000010r 1  45 4E 54 52  prompt:	.asciiz	"entra una linia:  "
000014r 1  41 20 55 4E  
000018r 1  41 20 4C 49  
000023r 1  43 41 44 45  invert:	.asciiz	"cadena invertida: "
000027r 1  4E 41 20 49  
00002Br 1  4E 56 45 52  
000036r 1  46 49 4E 41  adeu:	.asciiz	"finalitzat."
00003Ar 1  4C 49 54 5A  
00003Er 1  41 54 2E 00  
000042r 1               
000042r 1               	;; Work area (buffers and counter)
000042r 1               	.bss
000000r 1  00           numch:	.byte	0
000001r 1  00 00 00 00  buffin:	.res	64,$00
000005r 1  00 00 00 00  
000009r 1  00 00 00 00  
000041r 1  00 00 00 00  bufout:	.res	64,$00
000045r 1  00 00 00 00  
000049r 1  00 00 00 00  
000081r 1               
000081r 1               	.end
