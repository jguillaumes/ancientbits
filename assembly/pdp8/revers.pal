
/STRING REVERSER - PDP-8 PAL ASSEMBLER

	*200		/ STARTING ADDRESS

	OUTBUF=10	/ AUTOINDEX FOR OUTPUT
	INPBUF=11	/ AUTOINDEX OF INPUT
	REVBUF=12	/ AUTOINDEX FOR REVERSE
	BUFSIZ=120	/ BUFFER SIZE (DECIMAL: 80)
	CR=215		/ CARRIAGE RETURN
	LF=212		/ LINE FEED

	CLA CLL		/ Clear acc and link
	TAD	HELLO
	JMS	PUTSIX
	JMS	NEWL

GLOOP,	CLA CLL
	TAD	PROMPT
	JMS	PUTSIX

	JMS	GETASC
	JMS	NEWL
	CLA CLL
	TAD	CNTR
	SNA
	JMP	FINISH

	CLA CLL	
	TAD	INVER
	JMS	PUTSIX

	CLA CLL
	TAD	IBUFF
	JMS	PUTASC
	JMS	NEWL	
	JMP	GLOOP
	
FINISH,	CLA CLL
	TAD	BYE
	JMS	PUTSIX
	JMS	NEWL	
	HLT
	JMP I	[7600	

HELLO,	.
	TEXT	/STRING REVERSING PROGRAM (PDP-8 VERSION)/
PROMPT,	.
	TEXT	/ENTER A LINE:  /
INVER,	.
	TEXT	/REVERSED LINE: /
BYE,	.
	TEXT	/FINISHED./

	PAGE

PUTSIX,	0		/ ROUTINE START
			/ ADDRESS OF STRING IN AC
	DCA	OUTBUF
NEXTW,	TAD I	OUTBUF	/ GET SIXBIT PAIR
	DCA 	CURSIX	/ STORE IT
			/ EVEN HALF
	TAD	CURSIX	/ RE-GET CHARACTER
	AND 	LMASK	/ GET LEFT SIX BITS
	CLL		/ MAKE SURE LINK IS CLEAR
	RTR		/ ROTATE SIX TIMES TO RIGHT
	RTR		/ RTR ROTATES TWICE
	RTR		/ 
	SNA		/ ZERO?
	JMP I	PUTSIX	/ YES: END			
	JMS	SIXOUT	/ AND OUTPUT CHARACTER
			/ ODD HALF
	CLA
	TAD	CURSIX	/ GET BACK CURRENT WORD
	AND	RMASK	/ GET RIGHT CHARACTER
	SNA		/ ZERO?
	JMP I	PUTSIX	/ YES: END
	JMS	SIXOUT	/ OUTPUT CHARACTER
	JMP	NEXTW	/ NEXT WORD

SIXOUT,	0		/ TTY SIXBIT OUTPUT ROUTINE
	DCA	CURCHR	/ SAVE CURRENT CHARACTER
	CLL		/ CLEAR LINK/CARRY
	TAD	SPACE	/ GET VALUE OF SPACE (040)
	CIA		/ NEGATIVE IT...
	TAD	CURCHR	/ ADD ORIGINAL CHAR
	SPA		/ POSITIVE? (CHAR >= SPACE)
	JMP	ADDMSK	/ NO, ADD 0100
	CLA		/ YES, PROCEED AS IS
	TAD	CURCHR	/ READ AGAIN CHARACTER
	JMS	TTYO	/ OUTPUT CHAR
	JMP I	SIXOUT	/ RETUN
ADDMSK,	CLA		/ NO, GET CHAR...
	TAD	CURCHR	/ ... AS SAVED
	TAD	AMASK	/ AND ADD 0100 TO CONVER TO ASCII
	JMS	TTYO	/ PROCEED WITH OUTPUT
	JMP I 	SIXOUT	/ RETURN

NEWL,	0   		/ OUTPUT A NEW LINE
	CLA
	TAD	(CR)	/ OUTPUT CR
	JMS	TTYO
	CLA
	TAD	(LF)	/ OUTPUT LF
	JMS	TTYO
	JMP I	NEWL

TTYO,	0   		/ OUTPUT ASCII CHAR AT ACC
	TLS		/ WRITE AC TO OUTPUT
	TSF		/ SKIP IF TTY READY
	JMP	.-1	/ TTY NOT READY, REPEAT
	CLA		/ CLEAR AC
	JMP I	TTYO	/ RETURN 


AMASK,	0100		/ SIXBIT + 0100 = ASCII
LMASK,	7700		/ MASK FOR LEFT CHARACTER
RMASK,	0077		/ MASK FOR RIGHT CHARACTER
CURSIX,	0		/ CURRENT SIXBIT DUET
CURCHR,	0		/ SIXBIT CHARACTER IN PROCESS
SPACE,	40		/ BLANK SPACE
SIGN,	4000		/ SIGN MASK


	PAGE

GETASC,	0   		/ GET A CHARACTER STRING AT IBUFF
	CLA		
	DCA	CNTR	/ COUNTER = 0
	TAD	IBUFF
	DCA	INPBUFF	/ INPBUFF => BEGIN OF INPUT BUFFER
	KCC		/ CLEAR KBD BUFFER
ILOOP,	KSF		/
	JMP	.-1	/
	KRB		/ READ BUFFER
	DCA	LASTC	/ STORE TO USE LATER
	TAD 	LASTC	/ RECOVER TO STORE IN BUFFER
	DCA I	INPBUFF	/ STORE AND INCREMENT
	TAD 	LASTC	/ RECOVER AGAIN TO OUTPUT
	JMS 	TTYO	/ ECHO IT
	CLA		
	TAD	LASTC	/ RECOVER AGAIN TO CHECK ENDL
	CIA 		/ CHAR => -CHAR
	CLL		/ CLEAR CARRY
	TAD	ACR	/ ADD CR 
	SZA		/ ZERO?
	JMP	NOCR	/ NO, GO ON	
	JMP	FIXCR	/ YES, FIX TERMINATOR
NOCR,	CLA
	TAD	CNTR	/ AC = COUNTER	
	IAC		/ AC++
	DCA	CNTR	/ CNTR *= 1
	JMP	ILOOP	/ GET NEXT CHAR
FIXCR,	CLA
	TAD	INPBUFF
	TAD	MNONE	/ POINT BACK TO LAST CHARACTER
	CLA
	DCA I	INPBUFF	/ AND ZERO IT
	JMP I	GETASC	/ RETURN
	
PUTASC,	0		/ OUTPUT AN ASCII STRING
	CLL
	DCA	OUTBUF
OLOOP,	CLA CLL
	TAD I	OUTBUF
	SNA		/ ZERO?
	JMP I	PUTASC	/ YES, RETURN
	JMS 	TTYO	/ OUTPUT CHAR
	JMP	OLOOP	/ GET NEXT CHAR

ACR,	CR		/ CARRIAGE RETURN VALUE
MNONE,	-1		/ MINUS ONE
LASTC,	0		/ LAST READ CHARACTER
CNTR,	0		/ CHARACTER COUNTER
IBUFF,	.
	ZBLOCK BUFSIZ	/ INPUT BUFFER

	PAGE
RBUFF,	.
	ZBLOCK BUFSIZ	/ REVERSE BUFFER

